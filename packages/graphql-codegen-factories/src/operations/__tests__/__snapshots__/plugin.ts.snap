// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin should generate factory for a simple operation 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  switch(props.__typename) {
    case \\"Mutation\\": {
      const {  } = factories.createMutationMock({  });
      return { createUser: createCreateUserMutationMock_createUser({}), ...props };
    }
    case undefined:
    default:
      return createCreateUserMutationMock({ ...props, __typename: \\"Mutation\\" });
  }
}
export function createCreateUserMutationMock_createUser(props: Partial<CreateUserMutation[\\"createUser\\"]>): CreateUserMutation[\\"createUser\\"] {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock({ id: props.id, username: props.username });
      return { id, username, ...props };
    }
    case undefined:
    default:
      return createCreateUserMutationMock_createUser({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support aliases 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  switch(props.__typename) {
    case \\"Mutation\\": {
      const {  } = factories.createMutationMock({  });
      return { createUser: createCreateUserMutationMock_createUser({}), ...props };
    }
    case undefined:
    default:
      return createCreateUserMutationMock({ ...props, __typename: \\"Mutation\\" });
  }
}
export function createCreateUserMutationMock_createUser(props: Partial<CreateUserMutation[\\"createUser\\"]>): CreateUserMutation[\\"createUser\\"] {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username: email } = factories.createUserMock({ id: props.id, username: props.email });
      return { id, email, ...props };
    }
    case undefined:
    default:
      return createCreateUserMutationMock_createUser({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support external fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  switch(props.__typename) {
    case \\"Query\\": {
      const {  } = factories.createQueryMock({  });
      return { me: createGetMeQueryMock_me({}), ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock({ ...props, __typename: \\"Query\\" });
  }
}
export function createGetMeQueryMock_me(props: Partial<GetMeQuery[\\"me\\"]>): GetMeQuery[\\"me\\"] {
  switch(props.__typename) {
    case \\"User\\": {
      const {  } = factories.createUserMock({  });
      return { ...createGetMeQueryMock_me_User({}), ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me({ ...props, __typename: \\"User\\" });
  }
}
export function createGetMeQueryMock_me_User(props: Partial<Extract<GetMeQuery[\\"me\\"], { __typename: \\"User\\" }>>): Extract<GetMeQuery[\\"me\\"], { __typename: \\"User\\" }> {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock({ id: props.id, username: props.username });
      return { id, username, ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me_User({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  switch(props.__typename) {
    case \\"Query\\": {
      const {  } = factories.createQueryMock({  });
      return { me: createGetMeQueryMock_me({}), ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock({ ...props, __typename: \\"Query\\" });
  }
}
export function createGetMeQueryMock_me(props: Partial<GetMeQuery[\\"me\\"]>): GetMeQuery[\\"me\\"] {
  switch(props.__typename) {
    case \\"User\\": {
      const {  } = factories.createUserMock({  });
      return { ...createGetMeQueryMock_me_User({}), ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me({ ...props, __typename: \\"User\\" });
  }
}
export function createGetMeQueryMock_me_User(props: Partial<Extract<GetMeQuery[\\"me\\"], { __typename: \\"User\\" }>>): Extract<GetMeQuery[\\"me\\"], { __typename: \\"User\\" }> {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock({ id: props.id, username: props.username });
      return { id, username, ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me_User({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support inline fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  switch(props.__typename) {
    case \\"Query\\": {
      const {  } = factories.createQueryMock({  });
      return { me: createGetMeQueryMock_me({}), ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock({ ...props, __typename: \\"Query\\" });
  }
}
export function createGetMeQueryMock_me(props: Partial<GetMeQuery[\\"me\\"]>): GetMeQuery[\\"me\\"] {
  switch(props.__typename) {
    case \\"User\\": {
      const {  } = factories.createUserMock({  });
      return { ...createGetMeQueryMock_me_User({}), ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me({ ...props, __typename: \\"User\\" });
  }
}
export function createGetMeQueryMock_me_User(props: Partial<Extract<GetMeQuery[\\"me\\"], { __typename: \\"User\\" }>>): Extract<GetMeQuery[\\"me\\"], { __typename: \\"User\\" }> {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock({ id: props.id, username: props.username });
      return { id, username, ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me_User({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support lists 1`] = `
Object {
  "content": "export function createGetUsersQueryMock(props: Partial<GetUsersQuery>): GetUsersQuery {
  switch(props.__typename) {
    case \\"Query\\": {
      const {  } = factories.createQueryMock({  });
      return { users: [], ...props };
    }
    case undefined:
    default:
      return createGetUsersQueryMock({ ...props, __typename: \\"Query\\" });
  }
}
export function createGetUsersQueryMock_users(props: Partial<GetUsersQuery[\\"users\\"][number]>): GetUsersQuery[\\"users\\"][number] {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock({ id: props.id, username: props.username });
      return { id, username, ...props };
    }
    case undefined:
    default:
      return createGetUsersQueryMock_users({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support nested selections 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  switch(props.__typename) {
    case \\"Query\\": {
      const {  } = factories.createQueryMock({  });
      return { me: null, ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock({ ...props, __typename: \\"Query\\" });
  }
}
export function createGetMeQueryMock_me(props: Partial<NonNull<GetMeQuery[\\"me\\"]>>): NonNull<GetMeQuery[\\"me\\"]> {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock({ id: props.id, username: props.username });
      return { id, username, followers: null, ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me({ ...props, __typename: \\"User\\" });
  }
}
export function createGetMeQueryMock_me_followers(props: Partial<NonNull<NonNull<NonNull<GetMeQuery[\\"me\\"]>[\\"followers\\"]>[number]>>): NonNull<NonNull<NonNull<GetMeQuery[\\"me\\"]>[\\"followers\\"]>[number]> {
  switch(props.__typename) {
    case \\"User\\": {
      const { id } = factories.createUserMock({ id: props.id });
      return { id, ...props };
    }
    case undefined:
    default:
      return createGetMeQueryMock_me_followers({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support unions 1`] = `
Object {
  "content": "export function createGetMediasQueryMock(props: Partial<GetMediasQuery>): GetMediasQuery {
  switch(props.__typename) {
    case \\"Query\\": {
      const {  } = factories.createQueryMock({  });
      return { medias: [], ...props };
    }
    case undefined:
    default:
      return createGetMediasQueryMock({ ...props, __typename: \\"Query\\" });
  }
}
export function createGetMediasQueryMock_medias(props: Partial<GetMediasQuery[\\"medias\\"][number]>): GetMediasQuery[\\"medias\\"][number] {
  switch(props.__typename) {
    case \\"Image\\": {
      const {  } = factories.createImageMock({  });
      return { ...createGetMediasQueryMock_medias_Image({}), ...props };
    }
    case \\"Video\\": {
      const {  } = factories.createVideoMock({  });
      return { ...createGetMediasQueryMock_medias_Video({}), ...props };
    }
    case undefined:
    default:
      return createGetMediasQueryMock_medias({ ...props, __typename: \\"Image\\" });
  }
}
export function createGetMediasQueryMock_medias_Image(props: Partial<Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Image\\" }>>): Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Image\\" }> {
  switch(props.__typename) {
    case \\"Image\\": {
      const { src } = factories.createImageMock({ src: props.src });
      return { src, dimensions: null, ...props };
    }
    case undefined:
    default:
      return createGetMediasQueryMock_medias_Image({ ...props, __typename: \\"Image\\" });
  }
}
export function createGetMediasQueryMock_medias_Image_dimensions(props: Partial<NonNull<Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Image\\" }>[\\"dimensions\\"]>>): NonNull<Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Image\\" }>[\\"dimensions\\"]> {
  switch(props.__typename) {
    case \\"ImageDimensions\\": {
      const { width } = factories.createImageDimensionsMock({ width: props.width });
      return { width, ...props };
    }
    case undefined:
    default:
      return createGetMediasQueryMock_medias_Image_dimensions({ ...props, __typename: \\"ImageDimensions\\" });
  }
}
export function createGetMediasQueryMock_medias_Video(props: Partial<Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Video\\" }>>): Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Video\\" }> {
  switch(props.__typename) {
    case \\"Video\\": {
      const { href } = factories.createVideoMock({ href: props.href });
      return { href, dimensions: null, ...props };
    }
    case undefined:
    default:
      return createGetMediasQueryMock_medias_Video({ ...props, __typename: \\"Video\\" });
  }
}
export function createGetMediasQueryMock_medias_Video_dimensions(props: Partial<NonNull<Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Video\\" }>[\\"dimensions\\"]>>): NonNull<Extract<GetMediasQuery[\\"medias\\"][number], { __typename: \\"Video\\" }>[\\"dimensions\\"]> {
  switch(props.__typename) {
    case \\"ImageDimensions\\": {
      const { height } = factories.createImageDimensionsMock({ height: props.height });
      return { height, ...props };
    }
    case undefined:
    default:
      return createGetMediasQueryMock_medias_Video_dimensions({ ...props, __typename: \\"ImageDimensions\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;

exports[`plugin should support unnamed operations 1`] = `
Object {
  "content": "export function createUnnamed_1_QueryMock(props: Partial<Unnamed_1_Query>): Unnamed_1_Query {
  switch(props.__typename) {
    case \\"Query\\": {
      const {  } = factories.createQueryMock({  });
      return { me: null, ...props };
    }
    case undefined:
    default:
      return createUnnamed_1_QueryMock({ ...props, __typename: \\"Query\\" });
  }
}
export function createUnnamed_1_QueryMock_me(props: Partial<NonNull<Unnamed_1_Query[\\"me\\"]>>): NonNull<Unnamed_1_Query[\\"me\\"]> {
  switch(props.__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock({ id: props.id, username: props.username });
      return { id, username, ...props };
    }
    case undefined:
    default:
      return createUnnamed_1_QueryMock_me({ ...props, __typename: \\"User\\" });
  }
}",
  "prepend": Array [
    "import * as factories from \\"./factories\\";",
  ],
}
`;
