// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin should generate factory for a simple operation 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  return {
createUser: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should ignore the namespace for the operations types 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  return {
createUser: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support aliases 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  return {
createUser: {
__typename: 'User',
  id: \\"\\",
  email: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support external fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  return {
me: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  return {
me: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}

",
  "prepend": Array [],
}
`;

exports[`plugin should support lists 1`] = `
Object {
  "content": "export function createGetUsersQueryMock(props: Partial<GetUsersQuery>): GetUsersQuery {
  return {
users: [],

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support unnamed operations 1`] = `
Object {
  "content": "export function createUnnamed_1_QueryMock(props: Partial<Unnamed_1_Query>): Unnamed_1_Query {
  return {
me: null,

    ...props,
  };
}
",
  "prepend": Array [],
}
`;
