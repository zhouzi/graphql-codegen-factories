// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin should generate factory for a simple operation 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  return {
    __typename: \\"Mutation\\",
createUser: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should ignore the namespace for the operations types 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  return {
    __typename: \\"Mutation\\",
createUser: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support aliases 1`] = `
Object {
  "content": "export function createCreateUserMutationMock(props: Partial<CreateUserMutation>): CreateUserMutation {
  return {
    __typename: \\"Mutation\\",
createUser: {
__typename: 'User',
  id: \\"\\",
  email: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support external fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  return {
    __typename: \\"Query\\",
me: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  return {
    __typename: \\"Query\\",
me: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support inline fragments 1`] = `
Object {
  "content": "export function createGetMeQueryMock(props: Partial<GetMeQuery>): GetMeQuery {
  return {
    __typename: \\"Query\\",
me: {
__typename: 'User',
  id: \\"\\",
  username: \\"\\",

},

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support lists 1`] = `
Object {
  "content": "export function createGetUsersQueryMock(props: Partial<GetUsersQuery>): GetUsersQuery {
  return {
    __typename: \\"Query\\",
users: [],

    ...props,
  };
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support nested selections 1`] = `
Object {
  "content": "export function Query({ __typename = \\"Query\\", ...props }: DeepPartial<Query>) {
  switch(__typename) {
    case \\"Query\\": {
      const { me } = factories.createQueryMock(props);
      return { me };
    }
  }
}

export function Query_me({ __typename = \\"User\\", ...props }: DeepPartial<User>) {
  switch(__typename) {
    case \\"User\\": {
      const { id, username, followers } = factories.createUserMock(props);
      return { id, username, followers };
    }
  }
}

export function Query_me_followers({ __typename = \\"User\\", ...props }: DeepPartial<User>) {
  switch(__typename) {
    case \\"User\\": {
      const { id, username } = factories.createUserMock(props);
      return { id, username };
    }
  }
}
",
  "prepend": Array [],
}
`;

exports[`plugin should support unnamed operations 1`] = `
Object {
  "content": "export function createUnnamed_1_QueryMock(props: Partial<Unnamed_1_Query>): Unnamed_1_Query {
  return {
    __typename: \\"Query\\",
me: null,

    ...props,
  };
}
",
  "prepend": Array [],
}
`;
